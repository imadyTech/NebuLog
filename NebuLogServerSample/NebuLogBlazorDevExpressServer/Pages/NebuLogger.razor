@page "/NebuLogger"
@using imady.NebuLog
@using System.Threading
@inject NebuLogMessagePool pool

<h1>NebuLog</h1>

<p>A distributed logger for .net core</p>
<h3>Total received log messages:</h3>
<h2>@messageCount</h2>

@if (_messages == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <DxDataGrid Data="@DataSource" @ref="@_gridNebuLog" DataNavigationMode="DataGridNavigationMode.ShowAllDataRows">
        <DxDataGridDateEditColumn Field=@nameof(NebuLogMessageRequest.TimeOfLog) Width="200" />
        <DxDataGridColumn Field=@nameof(NebuLogMessageRequest.ProjectName) Caption="Project" />
        <DxDataGridColumn Field=@nameof(NebuLogMessageRequest.SenderName) Caption="Sender" />
        <DxDataGridColumn Field=@nameof(NebuLogMessageRequest.LogLevel) Caption="LogLevel" />
        <DxDataGridColumn Field=@nameof(NebuLogMessageRequest.LoggingMessage) Caption="Message" Width="" />
    </DxDataGrid>
}

@code {
    async Task<IEnumerable<NebuLogMessageRequest>> LoadDataAsync(CancellationToken token)
    {
        if (_messages.Count < tableLength)
        {
            return await Task<List<NebuLogMessageRequest>>.Run(() =>
            {
                return _messages;
            });
        }
        else
        {
            return await Task<List<NebuLogMessageRequest>>.Run(() =>
            {
                return _messages.TakeLast<NebuLogMessageRequest>(tableLength).ToList();
            });
        }
    }

    IEnumerable<NebuLogMessageRequest> DataSource;
    IEnumerable<NebuLogMessageRequest> LoadData()
    {
        int rowCount = _messages.Count < tableLength ? _messages.Count : tableLength;
        for (var i = 1; i < rowCount; i++)
        {
            yield return new NebuLogMessageRequest()
            {
                ProjectName = _messages[_messages.Count - i].ProjectName,
                LoggingMessage = _messages[_messages.Count - i].LoggingMessage
            };
        }
    }



    public int messageCount; // 累计收到message的计数器
    public const int tableLength = 10;
    private readonly List<NebuLogMessageRequest> _messages = new List<NebuLogMessageRequest>();


    protected override void OnInitialized()
    {
        //DataSource = LoadData();

        pool._blazorHandler += LogMessageReceived;
    }

    DxDataGrid<NebuLogMessageRequest> _gridNebuLog;
    private async Task LogMessageReceived(object sender, NebuLogMessageRequest request)
    {

        messageCount++;
        _messages.Add(request);

        if (_messages.Count < tableLength)
        {
            DataSource = _messages;
        }
        else
        {
            DataSource = _messages.TakeLast<NebuLogMessageRequest>(tableLength).ToList();
        }

        await _gridNebuLog.Refresh();
        //DataSource = LoadDataAsync(CancellationToken.None).Result;
        await this.InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }


    public void Dispose()
    {
        pool._blazorHandler -= LogMessageReceived;
    }

}
